{"version":3,"sources":["Navbar.js","Recipe.js","RecipeList.js","RecipeInput.js","RecipeApp.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","onClick","this","props","onNewRecipe","Component","defaultProps","Recipe","_this$props","title","img","instructions","id","onDelete","ingredients","map","ing","index","key","className","src","alt","type","RecipeList","recipes","r","src_Recipe_0","Object","assign","RecipeInput","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleNewIngredient","handleChangeIng","handleSubmit","e","setState","defineProperty","target","name","value","concat","toConsumableArray","Number","split","i","preventDefault","onSave","objectSpread","_this2","_this$state","onClose","inputs","size","autoComplete","placeholder","onChange","onSubmit","htmlFor","style","marginTop","rows","cols","alignSelf","marginRight","RecipeApp","nextId","showForm","handleSave","recipe","prevState","newRecipe","filter","_this3","src_Navbar_0","src_RecipeInput_0","src_RecipeList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_RecipeApp_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4433077.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nclass Navbar extends Component{\n    static defaultProps = {\n    onNewRecipe() {}\n  }\n  \n  static propTypes = {\n    onNewRecipe: PropTypes.func\n  }\n    render(){\n        return(\n             <header>\n                <h2><a>Recipe App</a></h2>\n                <nav>\n                  <li><a onClick={this.props.onNewRecipe}>New Recipe</a></li>\n                  <li><a>Home</a></li>\n                  <li><a>About</a></li>\n                  <li><a>Contact Us</a></li>\n                </nav>\n              </header>\n            );\n    }\n}\nexport default Navbar;","import React,{Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Recipe.css'\nclass Recipe extends Component{\n     static propTypes = {\n    title: PropTypes.string.isRequired,\n    ingredients: PropTypes.arrayOf(PropTypes.string).isRequired,\n    instructions: PropTypes.string.isRequired,\n    img: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    onDelete: PropTypes.func.isRequired\n  }\n    render(){\n        const {title,img,instructions,id,onDelete}=this.props,\n        ingredients=this.props.ingredients.map((ing,index)=>\n        (\n            <li key={index}>{ing}</li>    \n        ));\n       return(\n        <div className=\"recipe-card\">\n            <div className=\"recipe-card-img\">\n              <img src={img} alt={title} />\n            </div>\n            <div className=\"recipe-card-content\">\n              <h3 className=\"recipe-title\">{title}</h3>\n              <h4>Ingredients:</h4>\n              <ul>\n                {ingredients}\n              </ul>\n              <h4>Instructions:</h4>\n              <p>{instructions}</p>\n              <button className=\"btn\" type='button' onClick={() => onDelete(id)}>DELETE</button>\n            </div>\n            \n        </div>\n           ); \n    }\n}\nexport default Recipe;","import React, {Component} from 'react';\nimport Recipe from './Recipe';\nimport PropTypes from 'prop-types';\nimport './RecipeList.css';\n\n//{...R} IS SPREAD I.E ALL ELEMENTS OF R(RECIPES) LIKE TITLE,INSTRUCTION ETC\nclass RecipeList extends Component {\n  \n  static propTypes = {\n    recipes: PropTypes.arrayOf(PropTypes.object).isRequired,     //recipes should be array of object\n    onDelete:PropTypes.func.isRequired\n  }\n  \n  render() {\n    const {onDelete}=this.props;\n    const recipes = this.props.recipes.map(r => (\n      <Recipe key={r.id} {...r} onDelete={onDelete}/>\n    ));\n    \n    return (\n      <div className=\"recipe-list\">\n        {recipes}\n      </div>\n    )\n  \n  }\n}\n\nexport default RecipeList;","import React,{Component} from 'react';\nimport './RecipeInput.css';\nclass RecipeInput extends Component{\n    static defaultProps = {\n                            onClose() {},\n                            onSave() {}\n                        }\n    constructor(props){\n                        super(props);\n                        this.state = {title: '',instructions: \"\",ingredients: [''],img: '' };\n                        this.handleChange = this.handleChange.bind(this);\n                        this.handleNewIngredient = this.handleNewIngredient.bind(this);\n                        this.handleChangeIng = this.handleChangeIng.bind(this);\n                        this.handleSubmit = this.handleSubmit.bind(this);\n                    }\n                    \n                    handleChange(e) {\n                                        this.setState({[e.target.name]: e.target.value});\n                                     }\n                     handleNewIngredient(e) {\n                                                const {ingredients} = this.state;\n                                                this.setState({ingredients: [...ingredients, '']});\n                                            }\n                    handleChangeIng(e) {\n                                            const index = Number(e.target.name.split('-')[1]);\n                                            const ingredients = this.state.ingredients.map((ing, i) => (\n                                              i === index ? e.target.value : ing\n                                            ));\n                                            this.setState({ingredients});\n                                        }\n                    handleSubmit(e) {\n                                            e.preventDefault();\n                                            this.props.onSave({...this.state});\n                                            this.setState({title: '',instructions: \"\",ingredients: [''],img: '' });\n                                     }\n                    \n    render() {\n            const {title, instructions, img, ingredients} = this.state;\n            const {onClose} = this.props;\n            let inputs = ingredients.map((ing, i) => (\n              <div\n                className=\"recipe-form-line\"\n                key={`ingredient-${i}`}\n              >\n                <label>{i+1}.\n                  <input\n                    type=\"text\"\n                    name={`ingredient-${i}`}\n                    value={ing}\n                    size={45}\n                    autoComplete=\"off\"\n                    placeholder={`Ingredient${i+1}`}\n                    onChange={this.handleChangeIng} />\n                </label>\n              </div>\n            ));\n             return (\n                      <div className=\"recipe-form-container\">\n                        <form className='recipe-form' onSubmit={this.handleSubmit}>\n                          <button type=\"button\" className=\"close-button\" onClick={onClose}>X</button>\n                          <div className='recipe-form-line'>\n                            <label htmlFor='recipe-title-input'>Title</label>\n                            <input\n                              id='recipe-title-input'\n                              key='title'\n                              name='title'\n                              type='text'\n                              value={title}\n                              size={42}\n                              autoComplete=\"off\"\n                              onChange={this.handleChange}/>\n                          </div>\n                          <label\n                            htmlFor='recipe-instructions-input'\n                            style={{marginTop: '5px'}}>\n                            Instructions\n                          </label>\n                          <textarea\n                            key='instructions'\n                            id='recipe-instructions-input'\n                            type='Instructions'\n                            name='instructions'\n                            rows='8'\n                            cols='50'\n                            autoComplete='off'\n                            value={instructions}\n                            onChange={this.handleChange}/>\n                          \n                          {inputs}\n                          <button type=\"button\" onClick={this.handleNewIngredient} className=\"buttons\">+</button>\n                          \n                          <div className='recipe-form-line'>\n                            <label htmlFor='recipe-img-input'>Image Url</label>\n                            <input\n                              id='recipe-img-input'\n                              type='text'\n                              placeholder=''\n                              name='img'\n                              value={img}\n                              size={36}\n                              autoComplete='off'\n                              onChange={this.handleChange} />\n                          </div>\n                          <button\n                            type=\"submit\"\n                            className=\"buttons\"\n                            style={{alignSelf: 'flex-end', marginRight: 0}}\n                          >\n                            SAVE\n                          </button>\n                        </form>\n                      </div>\n    )\n    }\n}\nexport default RecipeInput;","import React,{Component} from 'react';\nimport './RecipeApp.css';\nimport Navbar from './Navbar';\nimport RecipeList from './RecipeList';\nimport RecipeInput from './RecipeInput';\n\nclass RecipeApp extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      recipes: [\n      {\n        id:0,\n        title: \"Spaghetti\",\n        instructions: \"Open jar of Spaghetti sauce.  Bring to simmer.  Boil water.  Cook pasta until done.  Combine pasta and sauce\",\n        ingredients: [\"pasta\", \"8 cups water\", \"1 box spaghetti\"],\n        img: \"spaghetti.jpg\"\n      },\n      {\n        id:1,\n        title: \"Milkshake\",\n        instructions: \"Combine ice cream and milk.  Blend until creamy\",\n        ingredients: [\"2 Scoops Ice cream\", \"8 ounces milk\"],\n        img: \"milkshake.jpg\"\n      },\n      {\n        id:2,\n        title: \"Avocado Toast\",\n        instructions: \"Toast bread.  Slice avocado and spread on bread.  Add salt, oil, and pepper to taste.\",\n        ingredients: [\"2 slices of bread\", \"1 avocado\", \"1 tablespoon olive oil\", \"1 pinch of salt\", \"pepper\"],\n        img: \"avocado_toast.jpg\"\n      }\n    ],\n    nextId:3,\n    showForm:false\n    }\n     this.handleSave = this.handleSave.bind(this);\n     this.onDelete = this.onDelete.bind(this);\n  }\n   handleSave(recipe) {\n                        this.setState((prevState, props) => {\n                          const newRecipe = {...recipe, id: this.state.nextId};\n                          return {\n                                    nextId: prevState.nextId + 1,\n                                    recipes: [...this.state.recipes, newRecipe],\n                                    showForm:false\n                                 }\n                        });\n                      }\n    onDelete(id)\n    {\n      const recipes = this.state.recipes.filter(r => r.id !== id);\n      this.setState({recipes});\n    }\n  \n  render(){\n     const {showForm} = this.state;\n  return (\n    <div className=\"App\">\n    <Navbar onNewRecipe={() => this.setState({showForm: true})} />\n    { showForm ?\n            <RecipeInput \n              onSave={this.handleSave}\n              onClose={() => this.setState({showForm: false})}  \n            /> : null \n    }\n    <RecipeList onDelete={this.onDelete} recipes={this.state.recipes}/>\n    </div>\n  );}\n}\n\nexport default RecipeApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RecipeApp from './RecipeApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<RecipeApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}